spring.application.name=mspedidoprocessor

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3311/pedido_processor_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:pedido_processor_user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:secure_password_pedido_processor}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.open-in-view=false

spring.flyway.locations=classpath:db/migration
spring.flyway.create-schemas=true
spring.flyway.baseline-on-migrate=true

logging.level.org.flywaydb=DEBUG
logging.level.com.zaxxer.hikari=ERROR
logging.level.org.apache.kafka=INFO
logging.level.org.springframework.kafka=INFO

spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.acks=all
spring.kafka.producer.retries=2147483647
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5
spring.kafka.producer.properties.retry.backoff.ms=100
spring.kafka.producer.properties.delivery.timeout.ms=120000
spring.kafka.producer.properties.request.timeout.ms=30000

spring.kafka.consumer.group-id=${SPRING_KAFKA_CONSUMER_GROUP_ID:grupo-pedido-processor}
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.properties.isolation.level=read_committed

app.kafka.topic.name=${APP_KAFKA_TOPIC_NAME:topico-pedido-processor}
app.kafka.topic.source=${APP_KAFKA_TOPIC_SOURCE:topico-pedido-reciver}

services.cliente=${SERVICES_CLIENTE:http://localhost:8084}
services.produto=${SERVICES_PRODUTO:http://localhost:8081}
services.pagamento=${SERVICES_PAGAMENTO:http://localhost:8083}
services.estoque=${SERVICES_ESTOQUE:http://localhost:8085}

server.port=${SERVER_PORT:8090}

spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.max-lifetime=1200000

management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.metrics.export.prometheus.enabled=true
